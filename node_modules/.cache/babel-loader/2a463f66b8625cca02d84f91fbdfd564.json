{"ast":null,"code":"var _jsxFileName = \"/Users/gracieeveritt/Documents/seir224/unit02/project/Project-2/src/Body/USData.js\";\nimport React from 'react';\n\nconst sortedStates = (array, totalType, totalCases) => {\n  let stateAggregate = {};\n\n  for (let i = 0; i < array.length; i++) {\n    let state = array[i].province;\n\n    if (stateAggregate[state]) {\n      stateAggregate[state] = stateAggregate[state] += array[i][totalType];\n    } else {\n      stateAggregate[state] = array[i][totalType];\n    }\n  }\n\n  let sortedStates = [];\n\n  for (let key in stateAggregate) {\n    sortedStates.push([key, stateAggregate[key]]);\n  }\n\n  sortedStates.sort(function (a, b) {\n    return b[1] - a[1];\n  });\n  console.log('sorted', sortedStates);\n  let newTableView = sortedStates.map((state, index) => {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: index,\n      state: state,\n      className: \"Each-State\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"TD-State\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }\n    }, state[0], \":\"), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"TD-Count\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }\n    }, state[1].toLocaleString({\n      minimumFractionDigits: 0\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"TD-Percent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }\n    }, (state[1] / totalCases * 100).toFixed(2), \"%\"));\n  });\n  return newTableView;\n};\n\nexport default sortedStates;","map":{"version":3,"sources":["/Users/gracieeveritt/Documents/seir224/unit02/project/Project-2/src/Body/USData.js"],"names":["React","sortedStates","array","totalType","totalCases","stateAggregate","i","length","state","province","key","push","sort","a","b","console","log","newTableView","map","index","toLocaleString","minimumFractionDigits","toFixed"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,SAAR,EAAmBC,UAAnB,KACrB;AACI,MAAIC,cAAc,GAAG,EAArB;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACJ,KAAK,CAACK,MAApB,EAA2BD,CAAC,EAA5B,EAA+B;AAC3B,QAAIE,KAAK,GAAGN,KAAK,CAACI,CAAD,CAAL,CAASG,QAArB;;AACA,QAAGJ,cAAc,CAACG,KAAD,CAAjB,EAAyB;AACrBH,MAAAA,cAAc,CAACG,KAAD,CAAd,GAAwBH,cAAc,CAACG,KAAD,CAAd,IAAyBN,KAAK,CAACI,CAAD,CAAL,CAASH,SAAT,CAAjD;AACH,KAFD,MAGI;AACAE,MAAAA,cAAc,CAACG,KAAD,CAAd,GAAsBN,KAAK,CAACI,CAAD,CAAL,CAASH,SAAT,CAAtB;AACH;AACJ;;AACD,MAAIF,YAAY,GAAC,EAAjB;;AACA,OAAI,IAAIS,GAAR,IAAeL,cAAf,EAA8B;AAC1BJ,IAAAA,YAAY,CAACU,IAAb,CAAkB,CAACD,GAAD,EAAKL,cAAc,CAACK,GAAD,CAAnB,CAAlB;AACH;;AACDT,EAAAA,YAAY,CAACW,IAAb,CAAkB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAC3B,WAAOA,CAAC,CAAC,CAAD,CAAD,GAAKD,CAAC,CAAC,CAAD,CAAb;AACH,GAFD;AAGAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBf,YAAtB;AACA,MAAIgB,YAAY,GAAGhB,YAAY,CAACiB,GAAb,CAAiB,CAACV,KAAD,EAAQW,KAAR,KAAkB;AAClD,wBACI;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAgB,MAAA,KAAK,EAAEX,KAAvB;AAA8B,MAAA,SAAS,EAAC,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0BA,KAAK,CAAC,CAAD,CAA/B,MADJ,eAEI;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2BA,KAAK,CAAC,CAAD,CAAN,CAAWY,cAAX,CAA0B;AAACC,MAAAA,qBAAqB,EAAC;AAAvB,KAA1B,CAA1B,CAFJ,eAGI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4B,CAAEb,KAAK,CAAC,CAAD,CAAL,GAASJ,UAAV,GAAsB,GAAvB,EAA4BkB,OAA5B,CAAoC,CAApC,CAA5B,MAHJ,CADJ;AAOC,GARc,CAAnB;AASA,SAAOL,YAAP;AACH,CA9BD;;AAgCA,eAAehB,YAAf","sourcesContent":["import React from 'react';\n\nconst sortedStates = (array, totalType, totalCases) => \n{\n    let stateAggregate = {}\n    for(let i=0;i<array.length;i++){\n        let state = array[i].province\n        if(stateAggregate[state]){\n            stateAggregate[state] = stateAggregate[state] += array[i][totalType]\n        }\n        else{\n            stateAggregate[state]=array[i][totalType]\n        }\n    }\n    let sortedStates=[]\n    for(let key in stateAggregate){\n        sortedStates.push([key,stateAggregate[key]])\n    }\n    sortedStates.sort(function(a,b){\n        return b[1]-a[1]\n    })\n    console.log('sorted', sortedStates)\n    let newTableView = sortedStates.map((state, index) => {\n        return (\n            <tr key={index} state={state} className=\"Each-State\">\n                <td className=\"TD-State\">{state[0]}:</td>\n                <td className=\"TD-Count\">{(state[1]).toLocaleString({minimumFractionDigits:0})}</td>\n                <td className=\"TD-Percent\">{((state[1]/totalCases)*100).toFixed(2)}%</td>\n            </tr>   \n         )\n        })\n    return newTableView\n}\n\nexport default sortedStates"]},"metadata":{},"sourceType":"module"}