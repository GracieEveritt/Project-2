{"ast":null,"code":"const functionStateData = (stateIndex, covidData) => {\n  let summaryByState = [];\n  stateIndex.map((state, index) => {\n    let totalConfirmed = 0;\n    let totalRecovered = 0;\n    let totalDeaths = 0; //This reduces over 3000 API city by State (down to 59 states/territories)\n\n    covidData.forEach(city => {\n      let stateKey = Object.keys(state).find(key => state[key] === city.province);\n\n      if (state[stateKey] === city.province) {\n        totalConfirmed += city.confirmed;\n        totalRecovered += city.recovered;\n        totalDeaths += city.deaths;\n      }\n\n      ; //The following sets object propeties and values for relevant data\n\n      state.stateAbbrev = Object.keys(state).find(key => state[key]);\n      state.stateName = state[state.stateAbbrev];\n      state.confirmed = totalConfirmed.toLocaleString({\n        minimumFractionDigits: 0\n      }); //The following calculates rates and sets Status and Colors based on current data\n\n      switch (true) {\n        case totalConfirmed < 200:\n          state.confirmedStatus = \"Very Low - Less than 200 Cases\";\n          state.confirmedFill = \"#FFD1DC\";\n          break;\n\n        case totalConfirmed < 1000:\n          state.confirmedStatus = \"Low - Less than 1,000 Cases\";\n          state.confirmedFill = \"#FFB7C5\";\n          break;\n\n        case totalConfirmed < 5000:\n          state.confirmedStatus = \"Growing: More than 5,000 Cases\";\n          state.confirmedFill = \"#FC8EAC\";\n          break;\n\n        case totalConfirmed < 10000:\n          state.confirmedStatus = \"Thriving - More than 10,000 Cases\";\n          state.confirmedFill = \"#E75480\";\n          break;\n\n        case totalConfirmed <= 25000:\n          state.confirmedStatus = \"Hot Spot! More than 10,000 Cases \";\n          state.confirmedFill = \"#DE3163\";\n          break;\n\n        case totalConfirmed > 25000:\n          state.confirmedStatus = \"TOO HOT! More than 25,000 Cases\";\n          state.confirmedFill = \"#B22222\";\n          break;\n\n        default:\n          state.confirmedFill = \"Unknown\";\n      }\n\n      state.recovered = totalRecovered.toLocaleString({\n        minimumFractionDigits: 0\n      });\n\n      switch (true) {\n        case totalRecovered / totalConfirmed * 100 < 0.05:\n          state.recoveryRate = (totalRecovered / totalConfirmed * 100).toFixed(1);\n          state.recoveredStatus = \"Too Low\";\n          state.recoveredFill = \"#bbf7b7\";\n          break;\n\n        case totalRecovered / totalConfirmed * 100 <= 0.15:\n          state.recoveryRate = (totalRecovered / totalConfirmed * 100).toFixed(1);\n          state.recoveredStatus = \"Average\";\n          state.recoveredFill = \"#89f981\";\n          break;\n\n        case totalRecovered / totalConfirmed * 100 > 0.15:\n          state.recoveryRate = (totalRecovered / totalConfirmed * 100).toFixed(1);\n          state.recoveredStatus = \"Above Average\";\n          state.recoveredFill = \"#15fc05\";\n          break;\n\n        default:\n          state.recoveredFill = \"Unknown\";\n      }\n\n      state.deaths = totalDeaths.toLocaleString({\n        minimumFractionDigits: 0\n      });\n\n      switch (true) {\n        case totalDeaths / totalConfirmed * 100 < 2:\n          state.deathRate = (totalDeaths / totalConfirmed * 100).toFixed(1);\n          state.deathStatus = \"Low\";\n          state.deathFill = \"#a7a4f9\";\n          break;\n\n        case totalDeaths / totalConfirmed * 100 <= 5:\n          state.deathRate = (totalDeaths / totalConfirmed * 100).toFixed(1);\n          state.deathStatus = \"Average\";\n          state.deathFill = \"#6762fc\";\n          break;\n\n        case totalDeaths / totalConfirmed * 100 > 5:\n          state.deathRate = (totalDeaths / totalConfirmed * 100).toFixed(1);\n          state.deathStatus = \"High!\";\n          state.deathFill = \"#ad05fc\";\n          break;\n\n        default:\n          state.deathFill = \"Unknown\";\n      }\n    });\n    return summaryByState.push(state);\n  }); //Here, I update the state variable - so that this new array is available for other functions\n\n  return summaryByState;\n};\n\nexport default functionStateData;","map":{"version":3,"sources":["/Users/gracieeveritt/Documents/seir224/unit02/project/Project-2/src/Maps/StateData.js"],"names":["functionStateData","stateIndex","covidData","summaryByState","map","state","index","totalConfirmed","totalRecovered","totalDeaths","forEach","city","stateKey","Object","keys","find","key","province","confirmed","recovered","deaths","stateAbbrev","stateName","toLocaleString","minimumFractionDigits","confirmedStatus","confirmedFill","recoveryRate","toFixed","recoveredStatus","recoveredFill","deathRate","deathStatus","deathFill","push"],"mappings":"AAEA,MAAMA,iBAAiB,GAAG,CAACC,UAAD,EAAaC,SAAb,KAA0B;AAChD,MAAIC,cAAc,GAAG,EAArB;AACAF,EAAAA,UAAU,CAACG,GAAX,CAAe,CAACC,KAAD,EAAQC,KAAR,KAAiB;AAC5B,QAAIC,cAAc,GAAG,CAArB;AACA,QAAIC,cAAc,GAAG,CAArB;AACA,QAAIC,WAAW,GAAG,CAAlB,CAH4B,CAK5B;;AACAP,IAAAA,SAAS,CAACQ,OAAV,CAAkBC,IAAI,IAAI;AAC1B,UAAIC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYT,KAAZ,EAAmBU,IAAnB,CAAwBC,GAAG,IAAIX,KAAK,CAACW,GAAD,CAAL,KAAeL,IAAI,CAACM,QAAnD,CAAf;;AACA,UAAIZ,KAAK,CAACO,QAAD,CAAL,KAAoBD,IAAI,CAACM,QAA7B,EAAsC;AAClCV,QAAAA,cAAc,IAAEI,IAAI,CAACO,SAArB;AACAV,QAAAA,cAAc,IAAEG,IAAI,CAACQ,SAArB;AACAV,QAAAA,WAAW,IAAEE,IAAI,CAACS,MAAlB;AACH;;AAAA,OANyB,CAQ1B;;AACAf,MAAAA,KAAK,CAACgB,WAAN,GAAoBR,MAAM,CAACC,IAAP,CAAYT,KAAZ,EAAmBU,IAAnB,CAAwBC,GAAG,IAAIX,KAAK,CAACW,GAAD,CAApC,CAApB;AACAX,MAAAA,KAAK,CAACiB,SAAN,GAAkBjB,KAAK,CAACA,KAAK,CAACgB,WAAP,CAAvB;AACAhB,MAAAA,KAAK,CAACa,SAAN,GAAkBX,cAAc,CAACgB,cAAf,CAA8B;AAACC,QAAAA,qBAAqB,EAAC;AAAvB,OAA9B,CAAlB,CAX0B,CAa1B;;AACA,cAAO,IAAP;AACA,aAAMjB,cAAc,GAAC,GAArB;AACIF,UAAAA,KAAK,CAACoB,eAAN,GAAwB,gCAAxB;AACApB,UAAAA,KAAK,CAACqB,aAAN,GAAsB,SAAtB;AACA;;AACJ,aAAMnB,cAAc,GAAC,IAArB;AACQF,UAAAA,KAAK,CAACoB,eAAN,GAAwB,6BAAxB;AACApB,UAAAA,KAAK,CAACqB,aAAN,GAAsB,SAAtB;AACA;;AACR,aAAMnB,cAAc,GAAC,IAArB;AACYF,UAAAA,KAAK,CAACoB,eAAN,GAAwB,gCAAxB;AACApB,UAAAA,KAAK,CAACqB,aAAN,GAAsB,SAAtB;AACA;;AACZ,aAAMnB,cAAc,GAAC,KAArB;AACQF,UAAAA,KAAK,CAACoB,eAAN,GAAwB,mCAAxB;AACApB,UAAAA,KAAK,CAACqB,aAAN,GAAsB,SAAtB;AACA;;AACR,aAAMnB,cAAc,IAAE,KAAtB;AACIF,UAAAA,KAAK,CAACoB,eAAN,GAAwB,mCAAxB;AACApB,UAAAA,KAAK,CAACqB,aAAN,GAAsB,SAAtB;AACA;;AACJ,aAAMnB,cAAc,GAAC,KAArB;AACIF,UAAAA,KAAK,CAACoB,eAAN,GAAwB,iCAAxB;AACApB,UAAAA,KAAK,CAACqB,aAAN,GAAsB,SAAtB;AACA;;AACJ;AACIrB,UAAAA,KAAK,CAACqB,aAAN,GAAsB,SAAtB;AA1BJ;;AA6BArB,MAAAA,KAAK,CAACc,SAAN,GAAkBX,cAAc,CAACe,cAAf,CAA8B;AAACC,QAAAA,qBAAqB,EAAC;AAAvB,OAA9B,CAAlB;;AAEA,cAAO,IAAP;AACA,aAAQhB,cAAc,GAACD,cAAhB,GAAgC,GAAjC,GAAsC,IAA5C;AACIF,UAAAA,KAAK,CAACsB,YAAN,GAAqB,CAAEnB,cAAc,GAACD,cAAhB,GAAgC,GAAjC,EAAsCqB,OAAtC,CAA8C,CAA9C,CAArB;AACAvB,UAAAA,KAAK,CAACwB,eAAN,GAAwB,SAAxB;AACAxB,UAAAA,KAAK,CAACyB,aAAN,GAAsB,SAAtB;AACA;;AACJ,aAAQtB,cAAc,GAACD,cAAhB,GAAgC,GAAjC,IAAuC,IAA7C;AACIF,UAAAA,KAAK,CAACsB,YAAN,GAAqB,CAAEnB,cAAc,GAACD,cAAhB,GAAgC,GAAjC,EAAsCqB,OAAtC,CAA8C,CAA9C,CAArB;AACJvB,UAAAA,KAAK,CAACwB,eAAN,GAAwB,SAAxB;AACIxB,UAAAA,KAAK,CAACyB,aAAN,GAAsB,SAAtB;AACA;;AACJ,aAAQtB,cAAc,GAACD,cAAhB,GAAgC,GAAjC,GAAsC,IAA5C;AACIF,UAAAA,KAAK,CAACsB,YAAN,GAAqB,CAAEnB,cAAc,GAACD,cAAhB,GAAgC,GAAjC,EAAsCqB,OAAtC,CAA8C,CAA9C,CAArB;AACAvB,UAAAA,KAAK,CAACwB,eAAN,GAAwB,eAAxB;AACAxB,UAAAA,KAAK,CAACyB,aAAN,GAAsB,SAAtB;AACA;;AACJ;AACIzB,UAAAA,KAAK,CAACyB,aAAN,GAAsB,SAAtB;AAjBJ;;AAoBAzB,MAAAA,KAAK,CAACe,MAAN,GAAeX,WAAW,CAACc,cAAZ,CAA2B;AAACC,QAAAA,qBAAqB,EAAC;AAAvB,OAA3B,CAAf;;AAEA,cAAO,IAAP;AACA,aAAQf,WAAW,GAACF,cAAb,GAA6B,GAA9B,GAAmC,CAAzC;AACIF,UAAAA,KAAK,CAAC0B,SAAN,GAAkB,CAAEtB,WAAW,GAACF,cAAb,GAA6B,GAA9B,EAAmCqB,OAAnC,CAA2C,CAA3C,CAAlB;AACAvB,UAAAA,KAAK,CAAC2B,WAAN,GAAoB,KAApB;AACA3B,UAAAA,KAAK,CAAC4B,SAAN,GAAkB,SAAlB;AACA;;AACJ,aAAQxB,WAAW,GAACF,cAAb,GAA6B,GAA9B,IAAoC,CAA1C;AACIF,UAAAA,KAAK,CAAC0B,SAAN,GAAkB,CAAEtB,WAAW,GAACF,cAAb,GAA6B,GAA9B,EAAmCqB,OAAnC,CAA2C,CAA3C,CAAlB;AACAvB,UAAAA,KAAK,CAAC2B,WAAN,GAAoB,SAApB;AACA3B,UAAAA,KAAK,CAAC4B,SAAN,GAAkB,SAAlB;AACA;;AACJ,aAAQxB,WAAW,GAACF,cAAb,GAA6B,GAA9B,GAAmC,CAAzC;AACIF,UAAAA,KAAK,CAAC0B,SAAN,GAAkB,CAAEtB,WAAW,GAACF,cAAb,GAA6B,GAA9B,EAAmCqB,OAAnC,CAA2C,CAA3C,CAAlB;AACAvB,UAAAA,KAAK,CAAC2B,WAAN,GAAoB,OAApB;AACA3B,UAAAA,KAAK,CAAC4B,SAAN,GAAkB,SAAlB;AACA;;AACJ;AACI5B,UAAAA,KAAK,CAAC4B,SAAN,GAAkB,SAAlB;AAjBJ;AAmBC,KAtFD;AAuFA,WAAO9B,cAAc,CAAC+B,IAAf,CAAoB7B,KAApB,CAAP;AACH,GA9FD,EAFgD,CAiGhD;;AACA,SAAOF,cAAP;AACH,CAnGD;;AAqGA,eAAeH,iBAAf","sourcesContent":["\n\nconst functionStateData = (stateIndex, covidData) =>{\n    let summaryByState = []\n    stateIndex.map((state, index) =>{\n        let totalConfirmed = 0\n        let totalRecovered = 0\n        let totalDeaths = 0\n\n        //This reduces over 3000 API city by State (down to 59 states/territories)\n        covidData.forEach(city => {\n        let stateKey = Object.keys(state).find(key => state[key] === city.province)\n        if (state[stateKey] === city.province){\n            totalConfirmed+=city.confirmed\n            totalRecovered+=city.recovered\n            totalDeaths+=city.deaths\n        };\n\n        //The following sets object propeties and values for relevant data\n        state.stateAbbrev = Object.keys(state).find(key => state[key] )\n        state.stateName = state[state.stateAbbrev]\n        state.confirmed = totalConfirmed.toLocaleString({minimumFractionDigits:0})\n        \n        //The following calculates rates and sets Status and Colors based on current data\n        switch(true){\n        case (totalConfirmed<200):\n            state.confirmedStatus = \"Very Low - Less than 200 Cases\";\n            state.confirmedFill = \"#FFD1DC\";\n            break;\n        case (totalConfirmed<1000):\n                state.confirmedStatus = \"Low - Less than 1,000 Cases\";\n                state.confirmedFill = \"#FFB7C5\";\n                break;\n        case (totalConfirmed<5000):\n                    state.confirmedStatus = \"Growing: More than 5,000 Cases\";\n                    state.confirmedFill = \"#FC8EAC\";\n                    break;\n        case (totalConfirmed<10000):\n                state.confirmedStatus = \"Thriving - More than 10,000 Cases\";\n                state.confirmedFill = \"#E75480\";\n                break;\n        case (totalConfirmed<=25000):\n            state.confirmedStatus = \"Hot Spot! More than 10,000 Cases \";\n            state.confirmedFill = \"#DE3163\";\n            break;\n        case (totalConfirmed>25000):\n            state.confirmedStatus = \"TOO HOT! More than 25,000 Cases\";\n            state.confirmedFill = \"#B22222\";\n            break;\n        default:\n            state.confirmedFill = \"Unknown\";\n        }\n        \n        state.recovered = totalRecovered.toLocaleString({minimumFractionDigits:0})\n        \n        switch(true){\n        case (((totalRecovered/totalConfirmed)*100)<0.05):\n            state.recoveryRate = ((totalRecovered/totalConfirmed)*100).toFixed(1)\n            state.recoveredStatus = \"Too Low\";\n            state.recoveredFill = \"#bbf7b7\";\n            break;\n        case (((totalRecovered/totalConfirmed)*100)<=0.15):\n            state.recoveryRate = ((totalRecovered/totalConfirmed)*100).toFixed(1)    \n        state.recoveredStatus = \"Average\";\n            state.recoveredFill = \"#89f981\";\n            break;\n        case (((totalRecovered/totalConfirmed)*100)>0.15):\n            state.recoveryRate = ((totalRecovered/totalConfirmed)*100).toFixed(1)\n            state.recoveredStatus = \"Above Average\";\n            state.recoveredFill = \"#15fc05\";\n            break;\n        default:\n            state.recoveredFill = \"Unknown\";\n        }\n        \n        state.deaths = totalDeaths.toLocaleString({minimumFractionDigits:0})\n    \n        switch(true){\n        case (((totalDeaths/totalConfirmed)*100)<2):\n            state.deathRate = ((totalDeaths/totalConfirmed)*100).toFixed(1)\n            state.deathStatus = \"Low\";\n            state.deathFill = \"#a7a4f9\";\n            break;\n        case (((totalDeaths/totalConfirmed)*100)<=5):\n            state.deathRate = ((totalDeaths/totalConfirmed)*100).toFixed(1)\n            state.deathStatus = \"Average\";\n            state.deathFill = \"#6762fc\";\n            break;\n        case (((totalDeaths/totalConfirmed)*100)>5):\n            state.deathRate = ((totalDeaths/totalConfirmed)*100).toFixed(1)\n            state.deathStatus = \"High!\";\n            state.deathFill = \"#ad05fc\";\n            break;\n        default:\n            state.deathFill = \"Unknown\";\n        }\n        })\n        return summaryByState.push(state)\n    })\n    //Here, I update the state variable - so that this new array is available for other functions\n    return summaryByState\n}\n\nexport default functionStateData"]},"metadata":{},"sourceType":"module"}